---
# - name: Install django                          
#   pip:
#     name: django

- name: Check if python is installed
  command: "python3 -V"
  register: pythonVersion  
- debug:
    var: pythonVersion.stdout 
    
- name: Creates Netbox directory 
  file:
    path: /opt/netbox
    state: directory
    mode: '0755'
  #become: true 
  
- name: clone Netbox
  become: true
  git:
    repo: 'https://github.com/netbox-community/netbox.git'
    dest: /opt/netbox/
    version: "{{ VERSION }}"
    #force: yes 

- name: Create a Group
  become: true
  group:
    name: netbox
    state: present
    system: yes 

- name: Assign the netbox user to the group netbox
  #become: true
  user:
    name: netbox
    group: netbox
    #system: yes 

#- name: Changing ownership
#  command: "chown -R netbox /opt/netbox/netbox/media/" 
#  become: true

- name: prerequisites - group rights management for netbox
  #become: true
  file:
    path: /opt/netbox/netbox/media/
    state: directory
    recurse: yes
    group: netbox


- name: copy file
  copy:
    src: /opt/netbox/netbox/netbox/configuration_example.py
    dest: /opt/netbox/netbox/netbox/configuration.py
    remote_src: yes
  #become: true 
  
- name: configuration file
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '^ALLOWED_HOSTS'
    line: ALLOWED_HOSTS = ['*']
    state: present
  #become: true 
##################################################fonction simple#################################################################
# - name: configuration - file modification
#   become: yes
#   replace:
#     path: "/opt/netbox/netbox/netbox/configuration.py"
#     regexp: "{{ item.From }}"                                       
#     replace: "{{ item.To }}"
#   with_items:
#     - { From: "ALLOWED_HOSTS = \\[\\]", To: "ALLOWED_HOSTS = ['*']" }
#     - { From: "'NAME': 'netbox', \\s+ # Database name", To: "'NAME': '{{ database }}', # Database name" }
#     - { From: "'USER': '', \\s+ # PostgreSQL username", To: "'USER': '{{ db_user }}',  # PostgreSQL username" }
#     - { From: "'PASSWORD': '', \\s+ # PostgreSQL password", To: "'PASSWORD': '{{ db_password }}',  # PostgreSQL password" }
#     - { From: "SECRET_KEY = ''", To: "SECRET_KEY = '{{ netbox_secret_key }}'" }
##################################################fonction simple#################################################################

- name: configuration Database for user
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WUSER\W)'                                                                                      
    line: "\\1:'{{db_user}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'                                             
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  #become: true 
  #tags: tes2
  
- name: configuration Database for password 
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WPASSWORD\W)'                                                                            
    line: "\\1:'{{db_password}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  #become: true 
  #tags: tes3

- name: get the key with python
  command: "python3 generate_secret_key.py "
  args:  
    chdir: /opt/netbox/netbox 
  register: keys 
# - set_fact:
#     string_to_echo: "{{ keys.stdout }}"
- debug:
    var: keys.stdout 
    #verbosity: 2
  #become: true
  tags: tes

- name: copy the key 
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '^SECRET_KEY'                                                                            
    line: SECRET_KEY = '{{ keys.stdout }}'                                             # "\\1:'{{key.stdout}}'"   
    insertafter: '^# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEYDATABASE'
    #backrefs: yes
    state: present
    #firstmatch: yes
    #backup: yes
  #become: true 
  tags: tes1

# - name: Execute script on remote_machine
#   shell: "sh /opt/netbox/upgrade.sh"
#   args:
#     executable: /bin/bash

- name: installation - running "upgrade.sh"
  become: true
  shell: |
    /opt/netbox/upgrade.sh
  #remote_src: yes
  #become: true 
  #tags: tes2 

# - name: put all in a block
#   block:
#   - name: installation - sending "init.sh"
#     become: true
#     copy:
#       src: "files/init.sh"
#       dest: init.sh
#       mode: u+rwx,g+rx,o+rx

#   # - name: Stay in mode venv
#   #   shell:  source /opt/netbox/venv/bin/activate && pip -V
#   #   register: check_venv
#   #   args:
#   #     executable: /bin/bash
#   #   become: true
#   # - debug:
#   #     var: check_venv.stdout 
#   #   become: true
#   #   tags: tes

#   - name: Create superuser wit bash file                                                    #"python3 manage.py createsuperuser "  #/op/netbox/venv/bin 
#     expect:
#       command: bash init.sh
#       #chdir: "/opt/netbox/netbox"
#       #command:  python3 manage.py createsuperuser  
#       responses:
#         Username:
#           - "net2"
#         Email:
#           - "madjou@test.com"
#         Password:
#           - "net1"
#           - "net1" 
#       timeout: 5
#       echo: yes
#     ignore_errors: true   
#     become: true

#   - name: Create symbolic link 
#     file:
#       src: "/opt/netbox/contrib/netbox-housekeeping.sh"
#       dest: "/etc/cron.daily/netbox-housekeeping"
#       state: link

#   - name: Configuration Netbox with Guinicorn
#     copy:
#       src: /opt/netbox/contrib/gunicorn.py
#       dest: /opt/netbox/gunicorn.py
#       remote_src: yes
#     become: true 

#   - name: Copy the service
#     copy: 
#       src: "/opt/netbox/contrib/{{ item }}"
#       dest: "/etc/systemd/system/{{ item }}"
#       remote_src: yes
#     with_items: 
#         - netbox.service
#         - netbox-rq.service
#     become: true

#   - name: reload netbox service
#     systemd:
#       daemon_reload: yes
#       name: "{{ item }}"
#     with_items: 
#       - netbox
#       - netbox-rq
#     become: true

#   - name: Start netbox service 
#     service: 
#       name: "{{ item }}"
#       state: started
#       enabled: yes
#     with_items: 
#       - netbox
#       - netbox-rq
#     become: true





#################################################################################################

- name: install script
  block:

  - name: installation - sending "init.sh"
    #become: true
    copy:
      src: "files/init.sh"
      dest: init.sh
      mode: u+rwx,g+rx,o+rx

  - name: installation - running "init.sh"
    expect: 
      command:  bash init.sh
      responses:
        Username:
            - "{{ netbox_super_user }}"
        Email:
            - "{{ netbox_super_email }}"
        Password:
            - "{{ netbox_super_password }}"
            - "{{ netbox_super_password }}" 
      echo: yes
      timeout: 5
    register: superuser
    ignore_errors: true

  # - name: installation - superuser creation checking
  #   block:

  #   - name: installation - "init.sh" ok, superuser already exists
  #     set_fact:
  #       superuser: 
  #         failed: false
  #     when: "'username is already taken' in superuser.msg"
      
  #   when: superuser.failed

  # - name: installation - superuser creation failed
  #   fail:
  #     msg: "superuser creation failed !"
  #   when: superuser.failed
  #tags: user1 

  - name: Create symbolic link 
    file:
      src: "/opt/netbox/contrib/netbox-housekeeping.sh"
      dest: "/etc/cron.daily/netbox-housekeeping"
      state: link

  - name: Configuration Netbox with Guinicorn
    copy:
      src: /opt/netbox/contrib/gunicorn.py
      dest: /opt/netbox/gunicorn.py
      remote_src: yes
    #become: true 

  - name: Copy the service
    # command: "cp -v /opt/netbox/contrib/*.service "
    # args:  
    #   chdir: /etc/systemd/system/
    copy: 
      src: "/opt/netbox/contrib/{{ item }}"
      dest: "/etc/systemd/system/{{ item }}"
      remote_src: yes
    with_items: 
        - netbox.service
        - netbox-rq.service
    #become: true
  
  - name: reload netbox service
    #become: true
    systemd:
      daemon_reload: yes
      scope: system
  #     #name: "{{ item }}"
  #   # with_items: 
  #   #   - netbox
  #   #   - netbox-rq
  #   become: true
  # - name: daemon_reload_sytem
  #   become: true
  #   command: systemctl daemon-reload


  # - name: Start netbox service 
  #   become: true
  #   command: systemctl start netbox.service netbox-rq.service #&& systemctl enable  netbox.service netbox-rq.service
  - name: Start netbox service 
    systemd: 
      name: "{{ item }}"
      state: started
      enabled: yes 
    with_items: 
      - netbox
      - netbox-rq
  # - name: anable netbox service
  #   become: true
  #   command: systemctl enable  netbox.service netbox-rq.service

  # - name: "Generate a certificate"
  #   shell: "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/netbox.key -out /etc/ssl/certs/netbox.crt"
  #   args:
  #     executable: /bin/bash
  #   tags: cert
  #   expect: 
  #     responses:
  #       Country Name:
  #           - FR
  #       Email:
  #           - "{{ netbox_super_email }}"
  #       Password:
  #           - "{{ netbox_super_password }}"
  #           - "{{ netbox_super_password }}" 
  #     echo: yes
  #     timeout: 5
    
  

#####################################################################################################




# - name: Configuration of netbox
#   lineinfile:
#     path: /opt/netbox/netbox/netbox/configuration.py
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     - { regexp: "^ALLOWED_HOSTS", line: "ALLOWED_HOSTS = ['*']" }
#     - { regexp: "^DATABASE", line: "DATABASE = {'USER':'{{db_user}}',"}
#     - { regexp: "^DATABASE", line: "DATABASE = {'PASSWORD':'{{db_password}}',"}
#   become: true 
#   tags: tes


  
  
                              #   command: ls
                              #   command: ls
                              #   args: 
                              # - name: Go to the folder Netbox1
                              #     chdir: /opt/netbox/   












# - name: Ensure user does not have unnecessary permissions
#   become: true
#   become_user: postgres
#   postgresql_user: name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB state=present


