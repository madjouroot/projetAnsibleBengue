---
# tasks file for deployNetbox
- name: install postgreSQL
  package:  
    name: "{{ item }}" 
    update_cache: true 
    state: latest
  when: ansible_distribution== "Ubuntu"
  loop:
    - acl
    - postgresql
    - postgresql-contrib
    - libpq-dev
    - python3-psycopg2

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Check the version of installed postgres
  register: psqlVersion 
  command: "psql -V" 
- debug:
    var: psqlVersion.stdout

- name: Create the database
  become: true
  become_user: postgres
  postgresql_db: 
    name: "{{ db_name }}" 
    template: template0
    state: present

- name: Create postgres user for my app
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{db_user}}"
    password: "{{db_password}}"
    state: present

- name: GRANT ALL PRIVILEGES ON DATABASE netbox TO netbox
  become: true
  become_user: postgres
  postgresql_privs:
    db: "{{ db_name }}"
    type: database
    role: "{{db_user}}"
    privs: ALL

- name: Ensure user has access to the new database
  become: true
  become_user: postgres
  postgresql_user: 
    db: "{{ db_name }}" 
    name: "{{db_user}}"  
    password: "{{db_password}}" 
    priv: ALL 
    state: present

- name: install Redis
  package:  
    name: redis-server
    update_cache: true 
    state: latest

- name: Check the version of installed Redis and the service status
  command: "redis-server -v"
  register: RedisVersion  
- debug:
    var: RedisVersion.stdout

- name:  the service status of Redis 
  command: "redis-cli ping"
  register: VerifyServiceStatus  
- debug:
    var: VerifyServiceStatus.stdout

- name: install of Netbox
  package:  
    name: "{{ item }}" 
    update_cache: true 
    state: latest
  when: ansible_distribution== "Ubuntu"
  loop:
    - python3
    - python3-pip
    - python3-venv
    - python3-dev
    - build-essential
    - libxml2-dev 
    - libxslt1-dev 
    - libffi-dev 
    - libpq-dev 
    - libssl-dev 
    - zlib1g-dev

- name: Install pexpect
  pip:
   name: pexpect

- name: Check if python is installed
  command: "python3 -V"
  register: pythonVersion  
- debug:
    var: pythonVersion.stdout 
    
- name: Creates Netbox directory 
  file:
    path: /opt/netbox
    state: directory
  become: true 
  
- name: clone Netbox
  git:
    repo: 'https://github.com/netbox-community/netbox.git'
    dest: /opt/netbox/
    force: yes 

- name: Create a Group
  group:
    name: netbox
    state: present

- name: Assign the netbox user to the group netbox
  user:
    name: netbox
    group: netbox

- name: Changing ownership
  command: "chown -R netbox /opt/netbox/netbox/media/" 
  become: true 

- name: copy file
  copy:
    src: /opt/netbox/netbox/netbox/configuration_example.py
    dest: /opt/netbox/netbox/netbox/configuration.py
    remote_src: yes
  become: true 
  
- name: configuration file
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '^ALLOWED_HOSTS'
    line: ALLOWED_HOSTS = ['*']
    state: present
  become: true 
##################################################fonction simple#################################################################
# - name: configuration - file modification
#   become: yes
#   replace:
#     path: "/opt/netbox/netbox/netbox/configuration.py"
#     regexp: "{{ item.From }}"                                       
#     replace: "{{ item.To }}"
#   with_items:
#     - { From: "ALLOWED_HOSTS = \\[\\]", To: "ALLOWED_HOSTS = ['*']" }
#     - { From: "'NAME': 'netbox', \\s+ # Database name", To: "'NAME': '{{ database }}', # Database name" }
#     - { From: "'USER': '', \\s+ # PostgreSQL username", To: "'USER': '{{ db_user }}',  # PostgreSQL username" }
#     - { From: "'PASSWORD': '', \\s+ # PostgreSQL password", To: "'PASSWORD': '{{ db_password }}',  # PostgreSQL password" }
#     - { From: "SECRET_KEY = ''", To: "SECRET_KEY = '{{ netbox_secret_key }}'" }
##################################################fonction simple#################################################################

- name: configuration Database for user
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WUSER\W)'                                                                                      
    line: "\\1:'{{db_user}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'                                             
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  become: true 
  #tags: tes2
  
- name: configuration Database for password 
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WPASSWORD\W)'                                                                            
    line: "\\1:'{{db_password}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  become: true 
  #tags: tes3

- name: get the key with python
  command: "python3 generate_secret_key.py "
  args:  
    chdir: /opt/netbox/netbox 
  register: keys 
# - set_fact:
#     string_to_echo: "{{ keys.stdout }}"
- debug:
    var: keys.stdout 
    #verbosity: 2
  become: true
  tags: tes

- name: copy the key 
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '^SECRET_KEY'                                                                            
    line: SECRET_KEY = '{{ keys.stdout }}'                                             # "\\1:'{{key.stdout}}'"   
    insertafter: '^# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEYDATABASE'
    #backrefs: yes
    state: present
    #firstmatch: yes
    #backup: yes
  become: true 
  tags: tes1

- name: Execute script on remote_machine
  shell: "sh /opt/netbox/upgrade.sh"
  args:
    executable: /bin/bash
  #remote_src: yes
  become: true 
  #tags: tes2 

- name: put all in a block
  block:
  - name: Stay in mode venv
    shell:  source /opt/netbox/venv/bin/activate && pip -V
    register: check_venv
    args:
      #chdir: /opt/netbox/venv/bin/activate 
      executable: /bin/bash
    become: true
  - debug:
      var: check_venv.stdout 
  
      #source activate
    # args:  
    #   chdir: /opt/netbox/venv/bin/
    #   executable: /bin/bash
    become: true
    tags: tes

  - name: Create superuser                                                      #"python3 manage.py createsuperuser "  #/op/netbox/venv/bin 
    expect:
      command:  python3 manage.py createsuperuser 
      #  /bin/bash -c source /opt/netbox/venv/bin/activate 
      #  cd /opt/netbox/netbox
      #  python3 manage. py createsuperuser
      chdir: "/opt/netbox/netbox"
      echo: yes 
      responses:
        Username:
          - "net7"
        #when: ansible_facts.getent_passwd[netbox1] is defined
        Email:
          - "madjou@test.com"
        Password:
          - "test"
          - "test" 
    ignore_errors: true   
    tags: user 
    become: true

  - name: Create symbolic link 
    file:
      src: "/opt/netbox/contrib/netbox-housekeeping.sh"
      dest: "/etc/cron.daily/netbox-housekeeping"
      state: link

  - name: Configuration Netbox with Guinicorn
    copy:
      src: /opt/netbox/contrib/gunicorn.py
      dest: /opt/netbox/gunicorn.py
      remote_src: yes
    become: true 

  - name: Copy the service
    # command: "cp -v /opt/netbox/contrib/*.service "
    # args:  
    #   chdir: /etc/systemd/system/
    copy: 
      src: "/opt/netbox/contrib/{{ item }}"
      dest: "/etc/systemd/system/{{ item }}"
      remote_src: yes
    with_items: 
        - netbox.service
        - netbox-rq.service
    become: true

  - name: start netbox service
    systemd:
      state: started
      daemon_reload: yes
      enabled: yes
      name: "{{ item }}"
    with_items: 
      - netbox
      - netbox-rq
    become: true

  #  - name: just force systemd to reload configs 
  #   systemd:
  #       daemon_reload: yes
  #   - name: Start and enabled service netbox, if not started
  #     service:
  #       name: netbox
  #       state: started
  #       enabled: yes
  #   - name: Start and enableservice netbox-rq, if not started
  #     service:
  #       name: netbox-rq
  #       state: started
  #       enabled: yes
    




#################################################################################################

# - name: install script
#   block:

#   - name: installation - sending "init.sh"
#     become: yes
#     copy:
#       src: "files/init.sh"
#       dest: init.sh
#       mode: u+rwx,g+rx,o+rx

#   - name: installation - running "init.sh"
#     expect: 
#       command: bash init.sh
#       responses:
#         Username:
#             - "{{ netbox_super_user }}"
#         Email:
#             - "{{ netbox_super_email }}"
#         Password:
#             - "{{ netbox_super_password }}"
#             - "{{ netbox_super_password }}"
#       echo: yes
#       timeout: 5
#     register: superuser
#     ignore_errors: yes

#   - name: installation - superuser creation checking
#     block:

#     - name: installation - "init.sh" ok, superuser already exists
#       set_fact:
#         superuser: 
#           failed: false
#       when: "'username is already taken' in superuser.msg"
      
#     when: superuser.failed

#   - name: installation - superuser creation failed
#     fail:
#       msg: "superuser creation failed !"
#     when: superuser.failed

#####################################################################################################




# - name: Configuration of netbox
#   lineinfile:
#     path: /opt/netbox/netbox/netbox/configuration.py
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     - { regexp: "^ALLOWED_HOSTS", line: "ALLOWED_HOSTS = ['*']" }
#     - { regexp: "^DATABASE", line: "DATABASE = {'USER':'{{db_user}}',"}
#     - { regexp: "^DATABASE", line: "DATABASE = {'PASSWORD':'{{db_password}}',"}
#   become: true 
#   tags: tes


  
  
                              #   command: ls
                              #   command: ls
                              #   args: 
                              # - name: Go to the folder Netbox1
                              #     chdir: /opt/netbox/   












# - name: Ensure user does not have unnecessary permissions
#   become: true
#   become_user: postgres
#   postgresql_user: name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB state=present


