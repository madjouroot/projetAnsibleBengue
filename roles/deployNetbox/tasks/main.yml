---
# tasks file for deployNetbox
- name: install postgreSQL
  package:  
    name: "{{ item }}" 
    update_cache: true 
    state: latest
  when: ansible_distribution== "Ubuntu"
  loop:
    - acl
    - postgresql
    - postgresql-contrib
    - libpq-dev
    - python3-psycopg2

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Check the version of installed postgres
  register: psqlVersion 
  command: "psql -V" 
- debug:
    var: psqlVersion.stdout

- name: Create the database
  become: true
  become_user: postgres
  postgresql_db: 
    name: "{{ db_name }}" 
    template: template0
    state: present

- name: Create postgres user for my app
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{db_user}}"
    password: "{{db_password}}"
    state: present

- name: GRANT ALL PRIVILEGES ON DATABASE netbox TO netbox
  become: true
  become_user: postgres
  postgresql_privs:
    db: "{{ db_name }}"
    type: database
    role: "{{db_user}}"
    privs: ALL

- name: Ensure user has access to the new database
  become: true
  become_user: postgres
  postgresql_user: 
    db: "{{ db_name }}" 
    name: "{{db_user}}"  
    password: "{{db_password}}" 
    priv: ALL 
    state: present

- name: install Redis
  package:  
    name: redis-server
    update_cache: true 
    state: latest

- name: Check the version of installed Redis and the service status
  command: "redis-server -v"
  register: RedisVersion  
- debug:
    var: RedisVersion.stdout

- name:  the service status of Redis 
  command: "redis-cli ping"
  register: VerifyServiceStatus  
- debug:
    var: VerifyServiceStatus.stdout

- name: install of Netbox
  package:  
    name: "{{ item }}" 
    update_cache: true 
    state: latest
  when: ansible_distribution== "Ubuntu"
  loop:
    - python3
    - python3-pip
    - python3-venv
    - python3-dev
    - build-essential
    - libxml2-dev 
    - libxslt1-dev 
    - libffi-dev 
    - libpq-dev 
    - libssl-dev 
    - zlib1g-dev

- name: Check if python is installed
  command: "python3 -V"
  register: pythonVersion  
- debug:
    var: pythonVersion.stdout 
    
- name: Creates Netbox directory 
  file:
    path: /opt/netbox
    state: directory
  become: true 
  
- name: clone Netbox
  git:
    repo: 'https://github.com/netbox-community/netbox.git'
    dest: /opt/netbox/
    force: yes 

- name: Create a Group
  group:
    name: netbox
    state: present

- name: Assign the netbox user to the group netbox
  user:
    name: netbox
    group: netbox

- name: Changing ownership
  command: "chown -R netbox /opt/netbox/netbox/media/" 
  become: true 

- name: copy file
  copy:
    src: /opt/netbox/netbox/netbox/configuration_example.py
    dest: /opt/netbox/netbox/netbox/configuration.py
    remote_src: yes
  become: true 
  #tags: tes

# - name: command shell
#   command: "sed -i 's/\'USER\'\: \'\'/\'USER\'\: \'netbox\'/' /opt/netbox/netbox/netbox/configuration.py"
#   become: true 
#   tags: tes
  #sudo sed -i 's/\#ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config

- name: configuration file
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '^ALLOWED_HOSTS'
    line: ALLOWED_HOSTS = ['*****']
    #insertafter: '# Example: ALLOWED_HOSTS'
    state: present
    #backup: yes
  become: true 
  #tags: tes


- name: configuration Database for user
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WUSER\W)'                                                                     #\s*\s*# PostgreSQL username                 #'^\s*USER\s*'
    line: "\\1:'{{db_user}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  become: true 
  #tags: tes2
  
- name: configuration Database for password 
  lineinfile:
    path: /opt/netbox/netbox/netbox/configuration.py
    regexp: '(^[^$]{4}\WPASSWORD\W)'                                                                            
    line: "\\1:'{{db_password}}',          # PostgreSQL username"   
    #insertafter: '^DATABASE'
    backrefs: yes
    state: present
    firstmatch: yes
    #backup: yes
  become: true 
  #tags: tes3


# - name: Configuration of netbox
#   lineinfile:
#     path: /opt/netbox/netbox/netbox/configuration.py
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     - { regexp: "^ALLOWED_HOSTS", line: "ALLOWED_HOSTS = ['*']" }
#     - { regexp: "^DATABASE", line: "DATABASE = {'USER':'{{db_user}}',"}
#     - { regexp: "^DATABASE", line: "DATABASE = {'PASSWORD':'{{db_password}}',"}
#   become: true 
#   tags: tes


  
  
                              #   command: ls
                              #   command: ls
                              #   args: 
                              # - name: Go to the folder Netbox1
                              #     chdir: /opt/netbox/   












# - name: Ensure user does not have unnecessary permissions
#   become: true
#   become_user: postgres
#   postgresql_user: name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB state=present


